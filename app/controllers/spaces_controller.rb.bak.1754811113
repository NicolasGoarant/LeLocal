class SpacesController < ApplicationController
  before_action :set_space, only: [:show, :edit, :update, :destroy]
  protect_from_forgery with: :exception

  def index
    @spaces = Space.all
    @spaces = (@spaces + simulated_spaces).sort_by(&:created_at).reverse
    @spaces = filter_by_location(@spaces, params[:location]) if params[:location].present?
    @spaces = filter_by_date_and_time(@spaces, params[:date], params[:start_time], params[:end_time]) if params[:date].present?
    @spaces = filter_by_capacity(@spaces, params[:capacity]) if params[:capacity].present?
    @spaces = filter_by_price(@spaces, params[:min_price], params[:max_price]) if params[:min_price].present? || params[:max_price].present?
    @spaces = filter_by_categories(@spaces, params[:categories]) if params[:categories].present?
    @spaces = filter_by_amenities(@spaces, params[:amenities]) if params[:amenities].present?
    render :map
  end

def submit_host
  # Concatène adresse + CP + ville dans le seul champ address
  full_address = [params[:address], params[:postal_code], params[:city]]
                   .compact.reject(&:blank?).join(' ')

  @space = Space.new(
    name:           params[:name],
    description:    params[:description],
    category:       params[:category],
    capacity:       params[:capacity].to_i,
    address:        full_address,
    price_per_hour: (params[:price_per_hour].presence || params[:hourly_price]).to_f
  )
  @space.user = current_user if respond_to?(:current_user) && user_signed_in?

  # Équipements : on écrit sur l'ATTRIBUT (pas l’association)
  if @space.has_attribute?(:amenities) && params[:equipment].present?
    @space[:amenities] = Array(params[:equipment])
  end

  if @space.save
    # Envoi d’email – ne casse jamais la requête si SMTP échoue
    begin
      HostProposalMailer.with(
        space: @space,
        raw_params: params.to_unsafe_h.except(:photos)
      ).notify_admin.deliver_now
    rescue => e
      Rails.logger.error("[MAILER] #{e.class}: #{e.message}")
    end

    render json: { success: true, id: @space.id }
  else
    render json: { success: false, message: @space.errors.full_messages.to_sentence },
           status: :unprocessable_entity
  end
end



  def show
    id = params[:id]
    space_name = params[:space_name]
    unless @space
      if id.to_i < 0
        @space = get_simulated_space_by_id(id.to_i) || (space_name.present? ? get_simulated_space_by_name(space_name) : nil)
      else
        @space = Space.find_by(id: id)
      end
    end
    unless @space
      flash[:alert] = "L'espace demandé n'a pas été trouvé."
      redirect_to search_spaces_path and return
    end
    @marker = { lat: @space.latitude, lng: @space.longitude, info: @space.name, id: @space.id }
    @reviews = @space.respond_to?(:reviews) ? @space.reviews.includes(:user) : []
    @reservation = Reservation.new if defined?(Reservation)
  end

  def new
    @space = Space.new
  end

  def create
    @space = Space.new(space_params)
    @space.user = current_user if user_signed_in?
    if @space.save
      flash[:notice] = "Votre espace a été créé avec succès et sera vérifié par notre équipe."
      redirect_to @space
    else
      render :new
    end
  end

  def edit; end

  def update
    if @space.update(space_params)
      flash[:notice] = "Les informations de l'espace ont été mises à jour."
      redirect_to @space
    else
      render :edit
    end
  end

  def destroy
    @space.destroy
    flash[:notice] = "L'espace a été supprimé."
    redirect_to spaces_path
  end

  def search
    @location = params[:location]
    @date = params[:date]
    @start_time = params[:start_time]
    @end_time = params[:end_time]
    @capacity = params[:capacity]
    @category = params[:category]
    @sort = params[:sort] || 'rating'
    if @capacity.present?
      if @capacity.include?("-")
        min_capacity, max_capacity = @capacity.split("-").map(&:to_i)
        @capacity_filter = "#{min_capacity}-#{max_capacity} personnes"
      else
        min_capacity = @capacity.to_i
        @capacity_filter = "#{min_capacity}+ personnes"
      end
    end
    @spaces = @location.present? ? simulated_spaces_by_city(@location) : simulated_spaces
    @center_coords = city_coordinates(@location) if @location.present?
    @spaces = @spaces.select { |s| s.category == @category } if @category.present? && @category != "Toutes les catégories"
    if @capacity.present?
      if @capacity.include?("-")
        min_capacity, max_capacity = @capacity.split("-").map(&:to_i)
        @spaces = @spaces.select { |s| s.capacity >= min_capacity && s.capacity <= max_capacity }
      else
        min_capacity = @capacity.to_i
        @spaces = @spaces.select { |s| s.capacity >= min_capacity }
      end
    end
    case @sort
    when 'price_asc'
      @spaces.sort_by!(&:price_per_hour)
    when 'price_desc'
      @spaces.sort_by!(&:price_per_hour).reverse!
    when 'capacity'
      @spaces.sort_by!(&:capacity).reverse!
    else
      @spaces.sort_by!(&:rating).reverse!
    end
  end

  def new_host
    @space = Space.new
  end

  private

  def set_space
    @space = params[:id].to_i > 0 ? Space.find_by(id: params[:id]) : get_simulated_space_by_id(params[:id].to_i)
  end

  def space_params
    params.require(:space).permit(:name, :description, :address, :capacity,
                                  :price_per_hour, :category, :rules, :cancellation_policy,
                                  :hourly_price, :country, :minimum_hours,
                                  :latitude, :longitude, photos: [], amenity_ids: [],
                                  amenities: [])
  end

  # ... ici tu gardes toutes tes méthodes simulated_spaces, filter_by_xxx, city_coordinates ...
end
